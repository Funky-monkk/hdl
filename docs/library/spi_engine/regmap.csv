Address ,,,,,,
DWORD ,BYTE ,Bits ,Name ,Type ,Default ,Description
0x00 ,0x0000 ,,VERSION ,,,Version of the peripheral. Follows semantic versioning. Current version 1.00.71.
,,[31:16] ,VERSION_MAJOR ,RO ,0x01 ,
,,[15:8] ,VERSION_MINOR ,RO ,0x00 ,
,,[7:0] ,VERSION_PATCH ,RO ,0x71 ,
0x01 ,0x0004 ,,PERIPHERAL_ID ,,,
,,[31:0] ,PERIPHERAL_ID ,RO ,ID ,"Value of the ID configuration parameter. In case of multiple instances, each instance will have a unique ID. "
0x02 ,0x0008 ,,SCRATCH ,,,
,,[31:0] ,SCRATCH ,RW ,0x00000000 ,Scratch register useful for debug.
0x03 ,0x000c ,,DATA_WIDTH ,,,
,,[31:0] ,DATA_WIDTH ,RO ,0x00000008 ,Data width of the SDI/SDO parallel interface. It is equal with the maximum supported transfer length in bits.
0x10 ,0x0040 ,,ENABLE ,,,
,,[31:0] ,ENABLE ,RW ,0x00000001 ,"Enable register. If the enable bit is set to 1 the internal state of the peripheral is reset. For proper operation, the bit needs to be set to 0. "
0x20 ,0x0080 ,,IRQ_MASK ,,,
,,[0] ,CMD_ALMOST_EMPTY ,RW ,0x00 ,If set to 0 the CMD_ALMOST_EMPTY interrupt is masked.
,,[1] ,SDO_ALMOST_EMPTY ,RW ,0x00 ,If set to 0 the SDO_ALMOST_EMPTY interrupt is masked.
,,[2] ,SDI_ALMOST_FULL ,RW ,0x00 ,If set to 0 the SDI_ALMOST_FULL interrupt is masked.
,,[3] ,SYNC_EVENT ,RW ,0x00 ,If set to 0 the SYNC_EVENT interrupt is masked.
0x21 ,0x0084 ,,IRQ_PENDING ,,,
,,[31:0] ,IRQ_PENDING ,RW1C ,0x00000000 ,Pending IRQs with mask.
0x22 ,0x0088 ,,IRQ_SOURCE ,,,
,,[31:0] ,IRQ_SOURCE ,RO ,0x00000000 ,Pending IRQs without mask.
0x30 ,0x00c0 ,,SYNC_ID ,,,
,,[31:0] ,SYNC_ID ,RO ,0x00000000 ,Last synchronization event ID received from the SPI engine control interface.
0x34 ,0x00d0 ,,CMD_FIFO_ROOM ,,,
,,[31:0] ,CMD_FIFO_ROOM ,RO ,0x???????? ,Number of free entries in the command FIFO. The reset value of the CMD_FIFO_ROOM register depends on the setting of the CMD_FIFO_ADDRESS_WIDTH parameter.
0x35 ,0x00d4 ,,SDO_FIFO_ROOM ,,,
,,[31:0] ,SDO_FIFO_ROOM ,RO ,0x???????? ,Number of free entries in the serial-data-out FIFO. The reset value of the SDO_FIFO_ROOM register depends on the setting of the SDO_FIFO_ADDRESS_WIDTH parameter.
0x36 ,0x00d8 ,,SDI_FIFO_LEVEL ,,,
,,[31:0] ,SDI_FIFO_LEVEL ,RO ,0x00000000 ,Number of valid entries in the serial-data-in FIFO.
0x38 ,0x00e0 ,,CMD_FIFO ,,,
,,[31:0] ,CMD_FIFO ,WO ,0x????????? ,Command FIFO register. Writing to this register inserts an entry into the command FIFO. Writing to this register when the command FIFO is full has no effect and the written entry is discarded. Reading from this register always returns 0x00000000.
0x39 ,0x00e4 ,,SDO_FIFO ,,,
,,[31:0] ,SDO_FIFO ,WO ,0x????????? ,SDO FIFO register. Writing to this register inserts an entry into the SDO FIFO. Writing to this register when the SDO FIFO is full has no effect and the written entry is discarded. Reading from this register always returns 0x00000000.
0x3a ,0x00e8 ,,SDI_FIFO ,,,
,,[31:0] ,SDI_FIFO ,RO ,0x????????? ,SDI FIFO register. Reading from this register removes the first entry from the SDI FIFO. Reading this register when the SDI FIFO is empty will return undefined data. Writing to it has no effect.
0x3c ,0x00f0 ,,SDI_FIFO_PEEK ,,,
,,[31:0] ,SDI_FIFO_PEEK ,RO ,0x????????? ,"SDI FIFO peek register. Reading from this register returns the first entry from the SDI FIFO, but without removing it from the FIFO. Reading this register when the SDI FIFO is empty will return undefined data. Writing to it has no effect. "
0x40 ,0x0100 ,,OFFLOAD0_EN ,,,
,,[31:0] ,OFFLOAD0_EN ,RW ,0x00000000 ,Set this bit to enable the offload module.
0x41 ,0x0104 ,,OFFLOAD0_STATUS ,,,
,,[31:0] ,OFFLOAD0_STATUS ,RO ,0x00000000 ,Offload status register.
0x42 ,0x0108 ,,OFFLOAD0_MEM_RESET ,,,
,,[31:0] ,OFFLOAD0_MEM_RESET ,WO ,0x00000000 ,Reset the memory of the offload module.
0x44 ,0x0110 ,,OFFLOAD0_CDM_FIFO ,,,
,,[31:0] ,OFFLOAD0_CDM_FIFO ,WO ,0x???????? ,Offload command FIFO register. Writing to this register inserts an entry into the command FIFO of the offload module. Writing to this register when the command FIFO is full has no effect and the written entry is discarded. Reading from this register always returns 0x00000000.
0x45 ,0x0114 ,,OFFLOAD0_SDO_FIFO ,,,
,,[31:0] ,OFFLOAD0_SDO_FIFO ,WO ,0x???????? ,Offload SDO FIFO register. Writing to this register inserts an entry into the offload SDO FIFO. Writing to this register when the SDO FIFO is full has no effect and the written entry is discarded. Reading from this register always returns 0x00000000.
,,,,,,Wed Oct 12 14:15:25 2022
